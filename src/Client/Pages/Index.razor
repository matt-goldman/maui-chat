@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable
<div class="chat-header">
    <div>
        <img src="/Assets/Images/maui.png"/>
    </div>

    <div>
        <h4 class="chat-title" style="color:white;">You're Welcome...to Maui Chat!</h4>
    </div>

    <div>
        <div class="row mb-3">
            <label for="inputUser" class="col-sm-2 col-form-label">User:</label>
            <input id="inputUser" @bind="userInput" class="form-control" disabled="@nameDisabled"/>
        </div>
        <div class="row mb-3">
            <label for="inputMessage" class="col-sm-2 col-form-label">Message:</label>
            <input id="inputMessage" class="form-control" @bind="messageInput" size="50" />
        </div>
        <button class="btn btn-primary" @onclick="Send" disabled="@(!buttonEnabled)">Send</button>
    </div>
</div>

<hr>

<div class="container">
    <MessageList @ref="messageList" UserId="@userId"></MessageList>
</div>

@code {
    private HubConnection hubConnection;
    
    private string userInput = string.Empty;
    private string messageInput = string.Empty;
    private string userId;
    private int avatarId;
    private bool nameDisabled = false;

    private bool buttonEnabled
    {
        get{
            return userInput.Length > 0 && messageInput.Length > 0 && IsConnected;
        }
    }

    MessageList messageList;

    protected override async Task OnInitializedAsync()
    {
        userId = Guid.NewGuid().ToString();

        Random rnd = new Random();

        avatarId = rnd.Next(1, 8);

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<ChatMessage>("ReceiveMessage", msg =>
        {
            messageList.AddMessage(msg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send()
    {
        try
        {
            var msg = new ChatMessage
            {
                UserName = userInput,
                Message = messageInput,
                UserId = userId,
                AvatarId = avatarId
            };

            await hubConnection.SendAsync("SendMessage", msg);

            nameDisabled = true;
            Console.WriteLine("Sent successfully");
        }
        catch
        {
            Console.WriteLine("Failed to send");
        }
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}