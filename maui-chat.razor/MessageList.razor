<ul id="messagesList" class="fill" style="min-height:100%; color:white;list-style-type:none;">
    @foreach (var message in Messages)
    {
        string imgSource = $"/Assets/Images/avatar{message.AvatarId}.png";

        if(message.UserId == UserId)
        {
            Console.WriteLine("Is own message");
            // put the message on the right
            <div class="d-flex flex-row-reverse">                    
                <li>
                    <div class="justify-content-end">
                        <hgroup class="speech-bubble-me">
                            <div class="h3">
                                @message.Message
                            </div>
                        </hgroup>
                        <img src="@imgSource" class="avatar"/>
                    </div>
                </li>
            </div>
        }
        else
        {
            Console.WriteLine("Someone else's message");
            // put the message on the left
            
            <li>
                <div class="d-flex flex-row">
                    <img src="@imgSource" class="avatar"/>
                    <hgroup class="speech-bubble-them">
                        <div class="h3">
                            @message.Message
                        </div>
                        <div class="h6">
                            @message.UserName
                        </div>
                    </hgroup>
                </div>
            </li>                
        }
    }
</ul>

@code {

    [Parameter]
    public List<ChatMessage> Messages { get; set; } = new List<ChatMessage>();

    [Parameter]
    public EventCallback<List<ChatMessage>> MessagesChanged { get; set; }

    private async Task OnMessagesChanged(ChangeEventArgs e)
    {
        var listOfMesages = e.Value as List<ChatMessage>;
        Messages = listOfMesages;
        await MessagesChanged.InvokeAsync(Messages);
    }

    [Parameter]
    public string UserId { get; set; }

    public void AddMessage(ChatMessage message)
    {
        Messages.Insert(0, message);
        StateHasChanged();
    }
        
}